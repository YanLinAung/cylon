#!/usr/bin/env node

var Program = require('commander'),
    Pkg = require('../package.json'),
    CliCommands = require('../src/cli/cli_commands'),
    sys = require('sys'),
    fs = require('fs');

Program
  .version(Pkg.version)
  .usage('[command] [options]');

Program
  .command("generate <name>")
  .description("Generates a new adaptor")
  .action(function(name) { require('../src/generators/adaptor')(name) });

Program
  .command("scan <type>")
  .description("Scans serial, bluetooth or usb (pass param <serial> | <bluetooth> | <usb>) for connected devices")
  .action(function(type) { CliCommands.scan(type); });

Program
  .command("pair <address> [hciX]")
  .description("Pairs a bluetooth device")
  .action(function(address, hciX) {
    hciX = (hciX === null || hciX === undefined) ? 'hci0' : hciX;
    CliCommands.pair(hciX, address);
  });

Program
  .command("unpair <address> [hciX]")
  .description("Removes a bluetooth device from paired devices list")
  .action(function(address, hciX) {
    hciX = (hciX === null || hciX === undefined) ? 'hci0' : hciX;
    CliCommands.unpair(hciX, address);
  });

Program
  .command("connect-to-serial <address> [dev]")
  .description("Removes a bluetooth device from paired devices list")
  .action(function(address, dev) {
    dev = (dev === null || dev === undefined) ? '/dev/rfcomm0' : dev;
    CliCommands.connectToSerial(dev, address);
  });

argv = Program.parse(process.argv);

var modules_path = process.cwd() + '/node_modules/';

if (fs.existsSync(modules_path)) {
  // require all cylon-* modules
  fs.readdirSync(modules_path).forEach(function(dir) {
    if (dir.match(/^cylon-.*/) !== null) {
      if (typeof require(dir).registerCommands === 'function') {
        var Commands = require(dir).registerCommands();
        for (name in Commands) {
          var command = Commands[name];

          // get subcommand arguments
          args = argv.args.slice(1)

          Program
            .command(name)
            .description(command.description)
            .action(command.command(args));
        }
      }
    }
  });
}

// print help if no arguments were provided
if(!Program.args.length) { Program.help(); }
