#!/usr/bin/env node

var Program = require('commander'),
    Pkg = require('../package.json'),
    fs = require('fs'),
    globule = require('globule'),
    CliCommands = require('../lib/cli/cli-commands');

Program
  .version(Pkg.version)
  .usage('[command] [options]');

Program
  .command("generate <name>")
  .description("Generates a new adaptor")
  .action(function(name) { require('../lib/generators/adaptor')(name) });

Program
  .command("scan <type>")
  .description("Scans serial, bluetooth or usb (pass param <serial> | <bluetooth> | <usb>) for connected devices")
  .action(function(type) {
    CliCommands.scan(type);
  });

Program
  .command("bluetooth <subcmd> [address] [option]")
  .description("Scan, pair, unpair bluetooth devices to/from the PC, establishes serial to bluetooth connection. Try 'cylon bluetooth help'")
  .action(function(subcmd, address, option){
    switch(subcmd){
    case 'pair':
      option = (option === null || option === undefined) ? 'hci0' : option;
      CliCommands.bluetooth.pair(option, address);
      break;
    case 'unpair':
      option = (option === null || option === undefined) ? 'hci0' : option;
      CliCommands.bluetooth.unpair(option, address);
      break;
    case 'connect':
      option = (option === null || option === undefined) ? '/dev/rfcomm0' : option;
      CliCommands.bluetooth.connect(option, address);
      break;
    case 'scan':
      CliCommands.bluetooth.scan();
      break;
    default:
      console.log("cylon bluetooth argument not recognized, try:\n");
      console.log("1.- cylon bluetooth scan");
      console.log("2.- cylon bluetooth pair <address> [hciX]");
      console.log("3.- cylon bluetooth unpair <address> [hciX]");
      console.log("4.- cylon bluetooth connect <address> [dev]\n");
    }
  });

var cylonModules = globule.find('cylon-*', { srcBase: 'node_modules'}),
    cylonModule;

cylonModules.forEach(function(moduleName){
  cylonModule = require(moduleName);

  if (typeof cylonModule.registerCommands === 'function') {
    var name,
        command,
        commands = cylonModule.registerCommands(),
        // get subcommand arguments
        args = process.argv.slice(3);

    for (name in commands) {
      command = commands[name];

      Program
        .command(name)
        .description(command.description)
        .action(function(){
          command.command(args);
        });
    }
  }
});

var argv = Program.parse(process.argv);

// print help if no arguments were provided
if(!Program.args.length) { Program.help(); }
